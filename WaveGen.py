# Programmer: Connor Fricke (cd.fricke23@gmail.com)
# File: WaveGen.py
# Latest Revision: 19-June-2024
# Synopsis: Function module designed for calculating parameters necessary for
# verilog module wave_generator.v, which implements the CORDIC algorithm to create sine/cosine signals.

import matplotlib.pyplot as plt
# global constants
SAMPLING_FREQ = 12e6 # Hz
SAMPLING_PER = 1.0 / SAMPLING_FREQ

def samplesPerPeriod(PHASE_INC: int) -> int:
    """
    Calculates the number of samples in a single period of the wave generated by the
    CORDIC IP given the phase increment value.
    """
    samples = 1
    phase = 0
    while (phase + PHASE_INC < 51472):
        phase += PHASE_INC
        samples += 1
    return samples

def getPhaseInc(possibleFreqs, desiredFreq):
    """
    @@ parameters:
        - possibleFreqs [(phaseInc, freq)]: a list of tuples of corresponding pairs
        of phase increments and the resulting output frequency of the CORDIC IP.
        - desiredFreq float: a floating point value representing the desired frequency
        output by the CORDIC IP
    @@ return:
        - given a particular desired frequency, the return value of this function is
        an integer type representing the required phase increment parameter to be passed
        to the CORDIC IP wave generator module.
    """
    previousDifference = abs(possibleFreqs[0][1] - desiredFreq)
    result = 0
    for pair in possibleFreqs:
        newDifference = abs(pair[1] - desiredFreq)
        if newDifference < previousDifference:
            result = pair[0]
        previousDifference = newDifference
    return result

def getFreqOut(PHASE_INC: int) -> float:
    """
    Given a particular phase increment parameter, this function
    will return the actual frequency of the output of the wave generator module.
    """
    return 1.0 / (SAMPLING_PER * samplesPerPeriod(PHASE_INC))

if __name__ == "__main__":

    # ** CREATE A LIST OF ALL POSSIBLE FREQUENCIES **
    previousPeriod = SAMPLING_PER * samplesPerPeriod(1)
    possibleFreqs = []
    for i in range(2, 51472):
        currentPeriod = SAMPLING_PER * samplesPerPeriod(i)
        if (currentPeriod != previousPeriod):
            previousPeriod = currentPeriod
            possibleFreqs.append((i, round(1.0/previousPeriod)))

    # ** PLOT POSSIBLE FREQUENCIES AGAINST THEIR PHASE INCREMENTS **
    phase_increments = [tuple[0] for tuple in possibleFreqs]
    frequencies = [tuple[1] for tuple in possibleFreqs]
    
    fig, ax = plt.subplots()
    ax.set_title("Quantization of Frequencies from CORDIC IP")
    ax.set_ylabel("Frequency")
    ax.set_xlabel("Phase Increment")
    ax.plot(phase_increments, frequencies, 'k.')
    plt.show()

    # ** PROMPT USER FOR A DESIRED FREQUENCY **
    userFreq = input("Enter the desired frequency output of the wave generator (Hz): ")
    requiredPhaseInc = getPhaseInc(possibleFreqs, float(userFreq))
    print(f"For this frequency, (or the closest option), your phase increment should be {requiredPhaseInc}")
    actualFreq = getFreqOut(requiredPhaseInc)
    print(f"The resulting frequency is {round(actualFreq)} Hz.")



        
        
        
