# Programmer: Connor Fricke (cd.fricke23@gmail.com)
# File: WaveGen.py
# Latest Revision: 19-June-2024
# Synopsis: Function module designed for calculating parameters necessary for
# verilog module wave_generator.v, which implements the CORDIC algorithm to create sine/cosine signals.

def freqOut(CLK_FREQ: float, PHASE_INC: int) -> float:
    """
    Calculates the resulting frequency of the sine/cosine signals generated by the CORDIC algorithm with
    the wave_generator.v module.
    @@ parameters:
        CLK_FREQ (float) - sampling frequency of the signal, same as the frequency of the input clock (Hz).
        PHASE_INC (int) - value that the phase input to the CORDIC algorithm changes each clock cycle. most likely
                          some positive factor of 2, but can be any integer
    """
    return (CLK_FREQ * PHASE_INC) / 51472

def phaseInc(CLK_FREQ: float, FREQ_OUT: float) -> float:
    """
    Calculates the required phase increment step of the sine/cosine signals generated by the CORDIC algorithm
    with the wave_generator.v module to obtain a particular output frequency.
    @@ parameters:
        CLK_FREQ (float) - sampling frequency of the signal, same as the frequency of the input clock (Hz).
        FREQ_OUT (float) - expected/desired output frequency of the signal generator
    """
    return (51472 * FREQ_OUT) / CLK_FREQ

if __name__ == "__main__":
    CLK_FREQ_MHz = 12
    DESIRED_FREQ_Hz = 500e3
    PHASE_INC = round(phaseInc(CLK_FREQ_MHz*1e6, DESIRED_FREQ_Hz))
    ACTUAL_FREQ = freqOut(CLK_FREQ_MHz*1e6, PHASE_INC)
    print(f"Nyquist Frequency: {CLK_FREQ_MHz/2} MHz")
    print(f"For desired frequency {round(DESIRED_FREQ_Hz)} Hz, with clock frequency {CLK_FREQ_MHz} MHz, the phase increment value should be: {PHASE_INC}")
    print(f"The actual frequency produced is {round(ACTUAL_FREQ)} Hz")
